// ‚úÖ API ÌÇ§ Î∞è ÏÑ§Ï†ï
const GEMINI_API_KEY = '.YOUR API KEY';
const STABILITY_API_KEY = 'YOUR API KEY';
const FOLDER_ID = 'YOUR FORDER ID'; // Ìè¥Îçî ID

function onEdit(e) {
  const sheet = e.source.getActiveSheet();
  const range = e.range;
  const row = range.getRow();

  if (sheet.getName() !== 'ÏãúÌä∏1') return;
  if (range.getColumn() !== 1 || row === 1) return;

  const korean = sheet.getRange(row, 1).getValue();
  if (!korean) return;

  try {
    // ‚è≥ 1. ÏÇ¨Ïö©ÏûêÏóêÍ≤å Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Ï§ëÏù¥ÎùºÎäî ÏïàÎÇ¥ ÌëúÏãú
    sheet.getRange(row, 5).setValue("Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Ï§ë...");

    // üåê 2. ÌïúÍµ≠Ïñ¥ ‚Üí Ï§ëÍµ≠Ïñ¥
    const chinese = LanguageApp.translate(korean, 'ko', 'zh-CN');
    sheet.getRange(row, 2).setValue(chinese);

    // üí° 3. Gemini ÌÇ§ÏõåÎìú
    const keywords = generateKeywordsFromGemini(korean);
    sheet.getRange(row, 3).setValue(keywords.join(", "));

    // üåé 4. ÏòÅÏñ¥ Î≤àÏó≠
    sheet.getRange(row, 4).setFormula(`=GOOGLETRANSLATE(A${row}, "ko", "en")`);
    SpreadsheetApp.flush();
    Utilities.sleep(1000);

    const translated = sheet.getRange(row, 4).getDisplayValue();

    // üñº 5. Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± ‚Üí ÏÑ±Í≥µ Ïãú ÎßÅÌÅ¨ ÎçÆÏñ¥Ïì∞Í∏∞
    const imageUrl = generateImageFromStability(translated, keywords);
    sheet.getRange(row, 5).setValue(imageUrl);

  } catch (err) {
    sheet.getRange(row, 5).setValue("ÏóêÎü¨: " + err.message);
    Logger.log("‚ùå Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Ïò§Î•ò: " + err.message);
  }
}

// ‚úÖ Gemini 2.0 Flash Í∏∞Î∞ò ÌÇ§ÏõåÎìú ÏÉùÏÑ±
function generateKeywordsFromGemini(text) {
  const prompt = `Îã§Ïùå Î¨∏Ïû•ÏùÑ ÏÑ§Î™ÖÌïòÎäî ÌïµÏã¨ ÌÇ§ÏõåÎìú 10Í∞úÎ•º ÏâºÌëúÎ°ú Íµ¨Î∂ÑÌï¥Ï§ò: "${text}"`;

  const response = UrlFetchApp.fetch(
    `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`,
    {
      method: "post",
      contentType: "application/json",
      payload: JSON.stringify({
        contents: [{ parts: [{ text: prompt }] }]
      })
    }
  );

  const result = JSON.parse(response.getContentText());
  const textOutput = result.candidates?.[0]?.content?.parts?.[0]?.text || "";

  return textOutput.replace(/\n/g, "").split(/,\s*/).map(k => k.trim());
}

// ‚úÖ Stability API Í∏∞Î∞ò Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±
function generateImageFromStability(translatedText, keywords) {
  const prompt = `A high-resolution, ultra-realistic photograph, cinematic lighting. Subject: ${translatedText}. Elements: ${keywords.join(", ")}. DSLR style, 5000x4000 resolution.`;

  const boundary = "----WebKitFormBoundary" + new Date().getTime();
  const delimiter = `--${boundary}`;
  const closeDelimiter = `--${boundary}--`;

  const body = [
    delimiter,
    'Content-Disposition: form-data; name="prompt"\r\n',
    prompt,
    delimiter,
    'Content-Disposition: form-data; name="output_format"\r\n',
    'png',
    closeDelimiter
  ].join('\r\n');

  const options = {
    method: "post",
    contentType: `multipart/form-data; boundary=${boundary}`,
    headers: { "Authorization": `Bearer ${STABILITY_API_KEY}` },
    payload: body,
    muteHttpExceptions: true
  };

  const response = UrlFetchApp.fetch("https://api.stability.ai/v2beta/stable-image/generate/core", options);
  const responseCode = response.getResponseCode();
  const contentType = response.getHeaders()["Content-Type"];

  if (responseCode !== 200 || !contentType.startsWith("image/")) {
    throw new Error(`Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Ïã§Ìå®: ${response.getContentText()}`);
  }

  const imageBlob = response.getBlob().setName(translatedText + ".png");
  const file = DriveApp.getFolderById(FOLDER_ID).createFile(imageBlob);
  return file.getUrl();
}
